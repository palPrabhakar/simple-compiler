@main {
.__sc_entry__:
  a: float = const 2.000000000000000;
  b: float = const 10.000000000000000;
  n: float = const 8.000000000000000;
  left: float = call @left_riemann a b n;
  print left;
  midpoint: float = call @midpoint_riemann a b n;
  print midpoint;
  right: float = call @right_riemann a b n;
  print right;
}
@square_function(x: float): float {
.__sc_entry__:
  square: float = fmul x x;
  ret square;
}
@left_riemann(a: float, b: float, n: float): float {
.__sc_entry__:
  zero: float = const 0.000000000000000;
  one: float = const 1.000000000000000;
  negative_one: float = fsub zero one;
  diff: float = fsub b a;
  delta: float = fdiv diff n;
  i: float = fsub n one;
  sum: float = const 0.000000000000000;
.while.header:
  cond: bool = feq i negative_one;
  br cond .while.end .while.body;
.while.body:
  offset: float = fmul delta i;
  x: float = fadd a offset;
  f_x: float = call @square_function x;
  sum: float = fadd sum f_x;
  i: float = fsub i one;
  jmp .while.header;
.while.end:
  sum: float = fmul sum delta;
  ret sum;
}
@right_riemann(a: float, b: float, n: float): float {
.__sc_entry__:
  zero: float = const 0.000000000000000;
  one: float = const 1.000000000000000;
  diff: float = fsub b a;
  delta: float = fdiv diff n;
  i: float = id n;
  sum: float = const 0.000000000000000;
.while.header:
  cond: bool = feq i zero;
  br cond .while.end .while.body;
.while.body:
  offset: float = fmul delta i;
  x: float = fadd a offset;
  f_x: float = call @square_function x;
  sum: float = fadd sum f_x;
  i: float = fsub i one;
  jmp .while.header;
.while.end:
  sum: float = fmul sum delta;
  ret sum;
}
@midpoint_riemann(a: float, b: float, n: float): float {
.__sc_entry__:
  zero: float = const 0.000000000000000;
  one: float = const 1.000000000000000;
  negative_one: float = fsub zero one;
  two: float = const 2.000000000000000;
  diff: float = fsub b a;
  delta: float = fdiv diff n;
  i: float = fsub n one;
  sum: float = const 0.000000000000000;
.while.header:
  cond: bool = feq i negative_one;
  br cond .while.end .while.body;
.while.body:
  offset: float = fmul delta i;
  half_delta: float = fdiv delta two;
  offset: float = fadd offset half_delta;
  x: float = fadd a offset;
  f_x: float = call @square_function x;
  sum: float = fadd sum f_x;
  i: float = fsub i one;
  jmp .while.header;
.while.end:
  sum: float = fmul sum delta;
  ret sum;
}
